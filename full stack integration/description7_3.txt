This project demonstrates how to build a real-time chat application using WebSocket connections powered by Socket.io in a Node.js backend and React frontend.
  It enables instant two-way communication between clients and the server, allowing users to send and receive messages instantly without reloading the page. 
  The application updates the chat interface in real time as messages are exchanged, simulating modern chat systems like WhatsApp or Discord.

Key Points
Backend (Node.js + Express + Socket.io):

Set up a WebSocket server using Socket.io integrated with Express.

Handled user connections, disconnections, and message broadcasting to all connected clients.

Managed socket events for real-time message updates.

Frontend (React + Socket.io Client):

Connected the React app to the Socket.io backend using the Socket.io client library.

Implemented a simple chat interface where users can input their name and send messages.

Displayed all incoming messages in real time using React state updates.

Learning Outcomes
Understand how WebSockets enable real-time communication between client and server.

Learn to integrate Socket.io in a Node.js and React environment.

Build and manage two-way data flow for interactive applications.

Gain hands-on experience in implementing real-time features such as instant messaging.

Develop skills to create scalable, event-driven applications that update dynamically.
